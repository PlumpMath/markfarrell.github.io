---
title: What Is the Concept of a Type in Type Theory?
---

In response to: [what is the concept of a type in type theory?](http://qr.ae/RUI80e)

Roughly speaking, a type in dependent type theory can be considered to be either a proposition, structured set, or a structured space residing at some universe level higher than that of structured sets and propositions. In traditional set theory and logic, there is an explicit distinction made between propositions in the logic and objects in the set theory; on the other hand, in dependent type theory there is, strictly speaking, no distinction between propositions and sets made explicit in the foundation. Furthermore, there are types of higher structure than that of sets and propositions in dependent type theory, though sets and propositions can be constructed within the system alongside these structures. Again, roughly speaking, the fact that higher structures than that of sets and propositions can be constructed in dependent type theory is one reason why it tends to support the development of category theory directly inside of it, unlike traditional set theory and logic.

My understanding is that the precise definition of a type depends on the formal system, i.e. the particular mechanical formulation of dependent type theory, that you are working in. In formal type theory, seen in the core languages of computer proof checkers, a type is a syntactic relation between a judgment about constructive truth and its evidence (e.g. relating lambda terms as formal proofs of propositions, or relating inhabitants of some structured set as evidence for its existence, and so on and so forth). However, in what's known as computational type theory, types are more like the "set-like" collections of objects that people are used to in mathematics and computing, relating closed terms in an open-ended computation system by way of their behaviour, or, meaning as a mental construction. The definition of types in computational type theory is more general than that of formal type theory, so much as to say that the definition of a type as a syntactic relation in formal type theory is just a special case of the definition of a type in computational type theory; the definition of types in computational type theory is arguably closer to what the definition of type ought to be when considering dependent type theory as a foundation for mathematics and computing, outside of its mechanized role in the machine-verification of formal proofs.

